USE GRAPH @graph
DROP QUERY load_alveo_dev
DROP QUERY print_dev

//Example invocations:
// RUN QUERY load_alveo_dev(["Person"], ["Coworker"],"weight")

CREATE DISTRIBUTED QUERY load_alveo_dev(
    SET<STRING> v_type,             // Set of names of vertex types to be considered. Example: ["Person", "Animal"]
    SET<STRING> e_type,             // Set of names of edge types to be considered. Example: ["co-worker", "owner"]
    STRING wt_attr                 // Name of the edge attribute which has weight of the the edge. Example: "weight"
)
{  
  
    //FILE node_file("/tmp/nodes");
    ListAccum<UINT> @@nodeAccum;
    ListAccum<UINT> @@kumar;

    MapAccum<UINT,UINT> @@parSize; //nodeid-> parSize
    MapAccum<UINT,UINT> @@offsets; //nodeid -> offsets
    SumAccum<UINT> @nextId = 0;
   // SumAccum<FLOAT> @@m; # total edge weight
   // SumAccum<FLOAT> @weight; # total weight incident to this vertex
   // SumAccum<FLOAT> @ccWeight; # total weight incident to the cc vertex

    Start = {v_type};
    @@nodeAccum.clear();

    nodes = {Person.*};
    dnodes = {dummy_nodes.*};
    @@offsets += (0 -> 0);

    nodeList = SELECT n FROM dnodes:n
        ACCUM @@nodeAccum += udf_xilinx_comdetect_set_node_id(n.NODE_ID) , udf_reset_nextId();
 
 
     PRINT @@nodeAccum;
     
     UPDATE n FROM  nodes:n
     SET n.louvainId = udf_get_nextId();
     
 
     
     partitionSizeList = SELECT n FROM dnodes:n
            ACCUM @@parSize += (n.NODE_ID -> udf_get_partition_size() );
    
     PRINT @@parSize;

     FOREACH n IN RANGE[0,@@nodeAccum.size()-1] DO
        @@offsets += (n+1 -> @@offsets.get(n)+@@parSize.get(n));
     END;

     offsetList = SELECT n FROM dnodes:n
            ACCUM udf_set_louvain_offset(@@offsets.get(n.NODE_ID));

  
     PRINT @@offsets;
/*
	// initialize
	Start = SELECT s FROM Start:s-(e_type:e)->:t
		ACCUM  udf_set_louvain_edge_list(s.louvainId,t.outdegree(),s.outdegree(),e.getAttr(wt_attr,"FLOAT"));
    */

}

CREATE DISTRIBUTED QUERY print_dev(STRING wt_attr) {  
      FILE f ("/home2/tigergraph/vivianw_output.txt");
      nodes = {Person.*}; 
      
      A2 = SELECT n FROM nodes:n
            POST-ACCUM f.println(n, n.louvainId)
            ORDER BY n.louvainId;
            
      PRINT A2[A2.louvainId];
}
INSTALL QUERY load_alveo_dev
INSTALL QUERY print_dev
