#
# Copyright 2020-2021 Xilinx, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
set query_timeout = 600000
use graph @graph
drop query cosinesim_ss_tg, loadgraph_cosinesim_ss_fpga, cosinesim_ss_fpga, 
           cosinesim_ss_test_fpga_consistency, code_str

create query code_str(vertex<patients> p, string e_str, int num) for graph @graph returns (string){
    string res;
    ListAccum<uint> @@code_list;
    patientList = {p};
    property_list (ANY) = select a FROM patientList-(e_str:e)-:a
        ORDER BY a.CODE DESC
        LIMIT num;

    my_list (ANY) = select v FROM property_list:v
        ACCUM @@code_list += v.CODE;

    foreach item in @@code_list do
        concat_uint64_to_str(res, item);
    end;

    return res;
}

create query cosinesim_ss_tg(string log_file) for graph @graph {
    uint topK;
    double score;
    DOUBLE run_time;
    vertex<patients> newPatient;
    ListAccum<testResults> @@result;
    FILE file1 (log_file);
    topK = 100;
# Patient Population
    population = {patients.*};
# Pick one random patient
    randomPatient = select p from population:p 
        Limit 10;
# Assign to a patient vertex
    randomPatient = select p from randomPatient:p
        ACCUM newPatient = p;
# Cosine Similarity using TigerGraph
    udf_reset_timer(true);
    @@result = cosinesim_match_sw(newPatient, topK);
    run_time = udf_elapsed_time(true);
    print "Software UDF" AS ComputationTechnique;
    print newPatient.FIRST_NAME + " " + newPatient.LAST_NAME AS Patient;
    print run_time AS ExecTimeInMs;
    file1.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER", 
            "#immunization", "immunizations", 
            "#allergy", "allergies", 
            "#condition", "conditions", 
            "#procedure", "procedures", 
            "#careplan", "careplans");
    foreach topKP in @@result do
        patientSet = select v from population:v 
        WHERE getvid(topKP.Id) == getvid(v) 
        ACCUM score = topKP.score
        POST-ACCUM file1.println(score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER, 
                v.outdegree("patient_HAD_immunization"), 
                #code_str(v, "patient_HAD_immunization", 3), 
                v.outdegree("patient_HAD_allergy"), 
                #code_str(v, "patient_HAD_allergy", 3),
                v.outdegree("patient_HAD_condition"), 
                #code_str(v, "patient_HAD_condition", 3),
                v.outdegree("patient_HAD_procedure"), 
                #code_str(v, "patient_HAD_procedure", 3),
                v.outdegree("patient_HAD_careplan")
                #code_str(v, "patient_HAD_careplan", 3)
                );
    end;
}

create query loadgraph_cosinesim_ss_fpga(int devices_needed) for graph @graph {
    STRING status;
    INT ret;
    ret = loadgraph_cosinesim_ss_fpga_core(devices_needed);
    print ret;
    IF ret == 0 THEN
        status = "FPGA loaded successfully";
    ELSE IF ret == -1 THEN
        status = "xclbin loading failed";
    ELSE IF ret == -2 THEN
        status = "config_cosinesim_ss_dense_fpga.json does not exit";
    ELSE IF ret == -3 THEN
        status = "xclbin does not exist";
    ELSE IF ret == -5 THEN
        status = "Shared library loading failed";
    ELSE IF ret == -6 THEN
        status = "Not enough devices";
    ELSE IF ret == -1001 THEN
        status = "Vertices distribution error";
    END;
    PRINT status;
}

create query cosinesim_ss_fpga(string log_file1, int devices_needed) for graph @graph {
    uint topK;
    vertex<patients> newPatient;
    ListAccum<testResults> @@result;
   	ListAccum<int> @@newPatientVector;

    double score;
    DOUBLE run_time;
    FILE file1 (log_file1);
    topK = 100;

# Patient Population
    udf_reset_timer(true);
    
    population = {patients.*};
    
# Pick one random patient
    randomPatient = select p from population:p 
        Limit 10;
# Assign to a patient vertex
    randomPatient = select p from randomPatient:p
        ACCUM newPatient = p;

	@@newPatientVector = patient_vector(newPatient);
    run_time1 = udf_elapsed_time(true);
    print run_time1 AS ExecTimeInMsLoadPopulation;

# Cosine Similarity using TigerGraph
    #############################################################
    udf_reset_timer(true);

@@result = udf_cosinesim_ss_fpga(topK, population.size(), 200, 
        @@newPatientVector, devices_needed);

    #@@result = cosinesim_ss_fpga_core(newPatient, topK, devices_needed);
    run_time = udf_elapsed_time(true);
    print run_time AS ExecTimeInMsCompute;


    print "Xilinx Alveo U50" AS ComputationTechnique;
    print newPatient.FIRST_NAME + " " + newPatient.LAST_NAME AS Patient;
    file1.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER",
            "#immunization", "immunizations",
            "#allergy", "allergies",
            "#condition", "conditions",
            "#procedure", "procedures",
            "#careplan", "careplans");
    foreach topKP in @@result do
        patientSet = select v from population:v
        WHERE getvid(topKP.Id) == getvid(v)
        ACCUM score = topKP.score
        POST-ACCUM file1.println(score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER,
                v.outdegree("patient_HAD_immunization"), 
                #code_str(v, "patient_HAD_immunization", 3),
                v.outdegree("patient_HAD_allergy"), 
                #code_str(v, "patient_HAD_allergy", 3),
                v.outdegree("patient_HAD_condition"), 
                #code_str(v, "patient_HAD_condition", 3),
                v.outdegree("patient_HAD_procedure"), 
                #code_str(v, "patient_HAD_procedure", 3),
                v.outdegree("patient_HAD_careplan") 
                #code_str(v, "patient_HAD_careplan", 3)
                );
    end;
}

create query cosinesim_ss_test_fpga_consistency(
    string log_file1, string log_file2, int devices_needed) for graph @graph {
    uint topK;
    vertex<patients> newPatient;
    ListAccum<testResults> @@result;
    ListAccum<testResults> @@result2;
    double score;
    FILE file1 (log_file1);
    FILE file2 (log_file2);
    topK = 100;
# Patient Population
    population = {patients.*};
# Pick one random patient
    randomPatient = select p from population:p 
        Limit 10;
# Assign to a patient vertex
    randomPatient = select p from randomPatient:p
        ACCUM newPatient = p;
    print newPatient;
# Cosine Similarity using TigerGraph
    @@result = cosinesim_ss_fpga_core(newPatient, topK, devices_needed);
    @@result2 = cosinesim_ss_fpga_core(newPatient, topK, devices_needed);
    print @@result2;
    print "Cosine Sim using Xilinx Alveo U50";
    file1.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER",
            "#immunization", "immunizations",
            "#allergy", "allergies",
            "#condition", "conditions",
            "#procedure", "procedures",
            "#careplan", "careplans");
    foreach topKP in @@result do
        patientSet = select v from population:v
        WHERE getvid(topKP.Id) == getvid(v)
        ACCUM score = topKP.score
        POST-ACCUM file1.println(score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER,
                v.outdegree("patient_HAD_immunization"), code_str(v, "patient_HAD_immunization", 3),
                v.outdegree("patient_HAD_allergy"), code_str(v, "patient_HAD_allergy", 3),
                v.outdegree("patient_HAD_condition"), 
                #code_str(v, "patient_HAD_condition", 3),
                v.outdegree("patient_HAD_procedure"), 
                #code_str(v, "patient_HAD_procedure", 3),
                v.outdegree("patient_HAD_careplan") 
                #code_str(v, "patient_HAD_careplan", 3)
                );
    end;
    file2.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER",
            "#immunization", "immunizations",
            "#allergy", "allergies",
            "#condition", "conditions",
            "#procedure", "procedures",
            "#careplan", "careplans");
    foreach topKP in @@result2 do
        patientSet = select v from population:v
        WHERE getvid(topKP.Id) == getvid(v)
        ACCUM score = topKP.score
        POST-ACCUM file2.println(score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER,
                v.outdegree("patient_HAD_immunization"), code_str(v, "patient_HAD_immunization", 3),
                v.outdegree("patient_HAD_allergy"), code_str(v, "patient_HAD_allergy", 3),
                v.outdegree("patient_HAD_condition"), code_str(v, "patient_HAD_condition", 3),
                v.outdegree("patient_HAD_procedure"), code_str(v, "patient_HAD_procedure", 3),
                v.outdegree("patient_HAD_careplan"), code_str(v, "patient_HAD_careplan", 3)
                );
    end;
}


install query code_str, cosinesim_ss_tg, loadgraph_cosinesim_ss_fpga, 
              cosinesim_ss_fpga, cosinesim_ss_test_fpga_consistency
