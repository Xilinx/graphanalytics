
USE GRAPH @graph
SET query_timeout = 600000
DROP QUERY client_cosinesim_load_cache, client_cosinesim_match_sw, client_cosinesim_set_num_devices,
    client_cosinesim_get_alveo_status, client_cosinesim_load_alveo, client_cosinesim_match_alveo


CREATE QUERY client_cosinesim_load_cache() FOR GRAPH @graph {
    DOUBLE run_time;
    udf_reset_timer(true);
    cosinesim_cache_to_vertices();
    run_time = udf_elapsed_time(true);
    PRINT run_time AS ExecTimeInMs;
}


CREATE QUERY client_cosinesim_match_sw(VERTEX<patients> newPatient, UINT topK) FOR GRAPH @graph {
    DOUBLE run_time;
    ListAccum<testResults> @@result;
    udf_reset_timer(true);
    @@result = cosinesim_match_sw(newPatient, topK);
    run_time = udf_elapsed_time(true);
    PRINT "Software UDF" AS ComputationTechnique, newPatient.FIRST_NAME + " " + newPatient.LAST_NAME AS Patient,
        run_time AS ExecTimeInMs, @@result AS Matches;
}


CREATE QUERY client_cosinesim_set_num_devices(UINT num_devices) FOR GRAPH @graph {
    cosinesim_set_num_devices(num_devices);
}


CREATE QUERY client_cosinesim_get_alveo_status() FOR GRAPH @graph {
    BOOL is_initialized;
    UINT num_devices;
    is_initialized = cosinesim_is_fpga_initialized();
    num_devices = cosinesim_get_num_devices();
    PRINT is_initialized AS IsInitialized, num_devices AS NumDevices;
}


CREATE QUERY client_cosinesim_load_alveo(INT numDevices) FOR GRAPH @graph {
    DOUBLE run_time;
    STRING status;
    INT ret;
    udf_reset_timer(true);
    ret = load_cu_cosinesim_ss_fpga_core(numDevices);
    run_time = udf_elapsed_time(true);
    IF ret == 0 THEN
        status = "FPGA loaded successfully";
    ELSE IF ret == -1 THEN
        status = "xclbin loading failed";
    ELSE IF ret == -2 THEN
        status = "config_cosinesim_ss_dense_fpga.json does not exit";
    ELSE IF ret == -3 THEN
        status = "xclbin does not exist";
    ELSE IF ret == -4 THEN
        status = "xclbin2 does not exist";
    ELSE IF ret == -5 THEN
        status = "Shared library loading failed";
    END;
    PRINT ret AS ErrorCode, status AS ErrorMessage, run_time AS ExecTimeInMs;
}


CREATE QUERY client_cosinesim_match_alveo(VERTEX<patients> newPatient, UINT topK, INT numDevices) FOR GRAPH @graph {
    DOUBLE run_time;
    ListAccum<testResults> @@result;
    udf_reset_timer(true);
    @@result = cosinesim_ss_fpga_core(newPatient, topK, numDevices);
    run_time = udf_elapsed_time(true);
    PRINT "Xilinx Alveo U50" AS ComputationTechnique, newPatient.FIRST_NAME + " " + newPatient.LAST_NAME AS Patient,
        run_time AS ExecTimeInMs, @@result AS Matches;
}


INSTALL QUERY client_cosinesim_load_cache, client_cosinesim_match_sw, client_cosinesim_set_num_devices,
              client_cosinesim_get_alveo_status, client_cosinesim_load_alveo, client_cosinesim_match_alveo
