#
# Copyright 2020-2021 Xilinx, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
USE GRAPH @graph
DROP QUERY cosinesim_ss_tg, cosinesim_ss_fpga

#create query code_str(vertex<patients> p, string e_str, int num) for graph @graph 
#    returns (string)
#{
#    string res;
#    ListAccum<uint> @@code_list;
#    patientList = {p};
#    property_list (ANY) = select a FROM patientList-(e_str:e)-:a
#        ORDER BY a.CODE DESC
#        LIMIT num;
#
#    my_list (ANY) = select v FROM property_list:v
#        ACCUM @@code_list += v.CODE;
#
#    foreach item in @@code_list do
#        concat_uint64_to_str(res, item);
#    end;
#
#    return res;
#}

CREATE QUERY cosinesim_ss_tg(string log_file) for graph @graph {
    uint topK;
    double score;
    DOUBLE run_time;
    vertex<patients> newPatient;
    ListAccum<XilCosinesimMatch> @@result;
    FILE file1 (log_file);
    topK = 100;
# Patient Population
    population = {patients.*};
# Pick one random patient
    randomPatient = select p from population:p 
        Limit 10;
# Assign to a patient vertex
    randomPatient = select p from randomPatient:p
        ACCUM newPatient = p;
# Cosine Similarity using TigerGraph
    udf_reset_timer(true);
    @@result = cosinesim_match_sw(newPatient, topK);
    run_time = udf_elapsed_time(true);
    print "Software UDF" AS ComputationTechnique;
    print newPatient.FIRST_NAME + " " + newPatient.LAST_NAME AS Patient;
    print run_time AS ExecTimeInMs;
    file1.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER", 
            "#immunization", "immunizations", 
            "#allergy", "allergies", 
            "#condition", "conditions", 
            "#procedure", "procedures", 
            "#careplan", "careplans");
    foreach topKP in @@result do
        patientSet = select v from population:v 
        WHERE getvid(topKP.Id) == getvid(v) 
        ACCUM score = topKP.score
        POST-ACCUM file1.println(score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER, 
                v.outdegree("patient_HAD_immunization"), 
                v.outdegree("patient_HAD_allergy"), 
                v.outdegree("patient_HAD_condition"), 
                v.outdegree("patient_HAD_procedure"), 
                v.outdegree("patient_HAD_careplan")
                );
    end;
}


#CREATE QUERY load_graph_cosinesim_ss_fpga() for graph @graph {
#    STRING status;
#    INT ret;
#    EXCEPTION cosinesimLoadFailed(40001);
#
#    ret = load_graph_cosinesim_ss_fpga_core();
#    print ret;
#    IF ret == 0 THEN
#        status = "Graph data loaded successfully";
#    ELSE
#        RAISE cosinesimLoadFailed("ERROR: Cosine Similarity load operation failed.  Please see the GPE log for details.");
#    END;
#    PRINT status;
#}

CREATE QUERY cosinesim_ss_fpga(string log_file1) for graph @graph {
    uint topK;
    vertex<patients> newPatient;
    ListAccum<XilCosinesimMatch> @@result;
    double score;
    DOUBLE run_time;
    FILE file1 (log_file1);
    EXCEPTION cosinesimMatchFailed(40002);

    topK = 100;
# Patient Population
    population = {patients.*};
# Pick one random patient
    randomPatient = select p from population:p 
        Limit 10;
# Assign to a patient vertex
    randomPatient = select p from randomPatient:p
        ACCUM newPatient = p;
# Cosine Similarity using TigerGraph
    udf_reset_timer(true);
    @@result = cosinesim_ss_fpga_core(newPatient, topK);
    run_time = udf_elapsed_time(true);

    IF @@result.size() < 1 THEN
        RAISE cosinesimMatchFailed("ERROR: Cosine Similarity match operation failed.  Please see the GPE log for details.");
    END;

    print "Xilinx Alveo card" AS ComputationTechnique;
    print newPatient.FIRST_NAME + " " + newPatient.LAST_NAME AS Patient;
    print run_time AS ExecTimeInMs;
    file1.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER",
            "#immunization", "immunizations",
            "#allergy", "allergies",
            "#condition", "conditions",
            "#procedure", "procedures",
            "#careplan", "careplans");
    foreach topKP in @@result do
        patientSet = select v from population:v
        WHERE getvid(topKP.Id) == getvid(v)
        ACCUM score = topKP.score
        POST-ACCUM file1.println(score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER,
                v.outdegree("patient_HAD_immunization"), 
                v.outdegree("patient_HAD_allergy"), 
                v.outdegree("patient_HAD_condition"), 
                v.outdegree("patient_HAD_procedure"), 
                v.outdegree("patient_HAD_careplan") 
                );
    end;
}

install query cosinesim_ss_tg, cosinesim_ss_fpga
