/*
 * Copyright 2021 Xilinx, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WANCUNCUANTIES ONCU CONDITIONS OF ANY KIND, either express or
 * implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

SET QUERY_TIMEOUT = 600000
USE GRAPH @graph

DROP QUERY entity_resolution_tg,entity_resolution_alveo, entity_resolution_retres_alveo, entity_resolution_cpu

CREATE QUERY entity_resolution_tg( ) for graph @graph 
{
    DOUBLE vm_peak, vm_hwm;
  	INT ret;
    bool isMatch;
    DOUBLE matchExecTime;

    ListAccum<string > @@refNamesAccum, @@newNamesAccum;

    refNamesSet = {ref_names.*};
    refNamesSelect = SELECT b FROM refNamesSet:b ACCUM @@refNamesAccum += b.name;

    newNamesSet = {new_names.*};
    newNamesSelect = SELECT t FROM newNamesSet:t ACCUM @@newNamesAccum += t.name;

    // matchExecTime only measures the match execution time. refnames load time
    // is excluded.
    matchExecTime = udf_fuzzymatch_tg(@@refNamesAccum, @@newNamesAccum);
    ret = udf_peak_memory_usage(vm_peak, vm_hwm);
    print "TigerGraph CPU" AS ComputationTechnique;
    print vm_peak/1000000.0 as PeakVirtualMemoryInGB;
    print vm_hwm/1000000.0 as PeakResidentMemoryInGB;
    print matchExecTime as ExecTimeInMs;
    print @@refNamesAccum.size() as RefNamesSize;
    print @@newNamesAccum.size() as TargetPersonsSize;
    print matchExecTime/@@newNamesAccum.size() as AvergeTimePerPersonInMs;
}

CREATE QUERY entity_resolution_cpu( ) for graph @graph 
{
    DOUBLE vm_peak, vm_hwm;
  	INT ret;
    bool isMatch;
    DOUBLE matchExecTime;

    ListAccum<string > @@refNamesAccum, @@newNamesAccum;

    refNamesSet = {ref_names.*};
    refNamesSelect = SELECT b FROM refNamesSet:b ACCUM @@refNamesAccum += b.name;

    newNamesSet = {new_names.*};
    newNamesSelect = SELECT t FROM newNamesSet:t ACCUM @@newNamesAccum += t.name;

    // matchExecTime only measures the match execution time. refnames load time
    // is excluded.
    matchExecTime = udf_fuzzymatch_cpu(@@refNamesAccum, @@newNamesAccum);
    ret = udf_peak_memory_usage(vm_peak, vm_hwm);
    print "TigerGraph CPU" AS ComputationTechnique;
    print vm_peak/1000000.0 as PeakVirtualMemoryInGB;
    print vm_hwm/1000000.0 as PeakResidentMemoryInGB;
    print matchExecTime as ExecTimeInMs;
    print @@refNamesAccum.size() as RefNamesSize;
    print @@newNamesAccum.size() as TargetPersonsSize;
    print matchExecTime/@@newNamesAccum.size() as AvergeTimePerPersonInMs;
}

CREATE QUERY entity_resolution_alveo( ) for graph @graph 
{
    DOUBLE vm_peak, vm_hwm;
  	INT ret;
    DOUBLE matchExecTime;
    ListAccum<string > @@refNamesAccum, @@newNamesAccum;
    INT similarity_level = 90;  // threshold for match

    refNamesSet = {ref_names.*};
    refNamesSelect = SELECT b FROM refNamesSet:b ACCUM @@refNamesAccum += b.name;

    newNamesSet = {new_names.*};
    newNamesSelect = SELECT t FROM newNamesSet:t ACCUM @@newNamesAccum += t.name;

    matchExecTime = udf_fuzzymatch_alveo(@@refNamesAccum, @@newNamesAccum, similarity_level);

    ret = udf_peak_memory_usage(vm_peak, vm_hwm);
    PRINT "Xilinx Alveo device" AS ComputationTechnique;
    PRINT vm_peak/1000000.0 as PeakVirtualMemoryInGB;
    PRINT vm_hwm/1000000.0 as PeakResidentMemoryInGB;
    PRINT @@refNamesAccum.size() as RefNamesSize;
    PRINT @@newNamesAccum.size() as TargetPersonsSize;
    IF matchExecTime < 0 THEN
        PRINT matchExecTime as MatchErrorCode;   
    ELSE
        PRINT matchExecTime as MatchExecTimeInMs;
        PRINT matchExecTime/@@newNamesAccum.size() as AvergeTimePerPersonInMs;   
    END;
    
}
CREATE QUERY entity_resolution_retres_alveo( ) for graph @graph 
{
    DOUBLE vm_peak, vm_hwm;
  	INT ret;
    DOUBLE matchExecTime;
    ListAccum<string > @@refNamesAccum, @@newNamesAccum;
    #TYPEDEF TUPLE <id INT, score INT> MatchResultPair;
    #ListAccum<ListAccum<MatchResultPair>> result;
    ListAccum<ListAccum<ListAccum<INT>>> @@result;
    INT similarity_level = 90;  // threshold for match

    refNamesSet = {ref_names.*};
    refNamesSelect = SELECT b FROM refNamesSet:b ACCUM @@refNamesAccum += b.name;

    newNamesSet = {new_names.*};
    newNamesSelect = SELECT t FROM newNamesSet:t ACCUM @@newNamesAccum += t.name;

    udf_reset_timer(true);
    #matchExecTime = udf_fuzzymatch_alveo(@@refNamesAccum, @@newNamesAccum, similarity_level);
    @@result = udf_fuzzymatch_retres_alveo(@@refNamesAccum, @@newNamesAccum, similarity_level);
    matchExecTime = udf_elapsed_time(true);

    ret = udf_peak_memory_usage(vm_peak, vm_hwm);
    PRINT "Xilinx Alveo device" AS ComputationTechnique;
    PRINT vm_peak/1000000.0 as PeakVirtualMemoryInGB;
    PRINT vm_hwm/1000000.0 as PeakResidentMemoryInGB;
    PRINT @@refNamesAccum.size() as RefNamesSize;
    PRINT @@newNamesAccum.size() as TargetPersonsSize;
    IF matchExecTime < 0 THEN
        PRINT matchExecTime as MatchErrorCode;   
    ELSE
        PRINT matchExecTime as MatchExecTimeInMs;
        PRINT matchExecTime/@@newNamesAccum.size() as AvergeTimePerPersonInMs;   
    END;

    #add result
    PRINT @@result.size() as ResultSize;
    PRINT @@result as TopKMatch;
    
}


INSTALL QUERY entity_resolution_tg, entity_resolution_alveo, entity_resolution_retres_alveo, entity_resolution_cpu
