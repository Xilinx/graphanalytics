#
# Copyright 2020-2021 Xilinx, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
set query_timeout = 600000
use graph @graph
drop query all

create query patient_age(vertex<patients> p) for graph @graph returns (int){ 
    float age;
    datetime deathdate;
    datetime birthdate;

    deathdate = to_datetime(p.DEATHDATE);
    birthdate = to_datetime(p.BIRTHDATE);

    if (p.DEATHDATE == "") OR (p.DEATHDATE == "2999-12-31") then
        age = datetime_diff( now(), birthdate) / (60 * 60 * 24 * 365);
    else
        age = datetime_diff( deathdate, birthdate) / (60 * 60 * 24 * 365);
    end;

    if (age < 1.0 ) then
        age = 1.0;
    else if (age > 100.0 ) then
        age = 100.0;
    end;

    return float_to_int(age);
}

create query patient_gender(vertex<patients> p) for graph @graph returns (int){ 
	uint gender;

	if (p.GENDER == "M") then 
		gender = 1;
	else
		gender = 2;
	end;

	return gender;
}

create query patient_race(vertex<patients> p) for graph @graph returns (int){ 
	uint race;
	string raceString;

	race = 1;
	raceString = p.RACE;

	case
	    when raceString == "black" then race = 2;
	    when raceString == "white" then race = 3;
	    when raceString == "hispanic" OR raceString == "latino" then race = 4;
	    when raceString == "asian" then race = 5;
	    when raceString == "indian" then race = 6;
	else race = 1; 
	end;

	return race;
}

create query patient_ethnicity(vertex<patients> p) for graph @graph returns (int){ 
	uint ethnicity;
	STRING eString;

	ethnicity = 1;
	eString = p.ETHNICITY;

	case
		when eString == "nonhispanic" then ethnicity = 2;
	when eString == "hispanic" then ethnicity = 3;
	else ethnicity = 1; 
	end;

	return ethnicity;
}


create query patient_vector(vertex<patients> targetPatient) for graph @graph returns (ListAccum<int>) {

# For each patient population, property vector has following
# Unused fields are filled with zeros

#    Range  : Count       : Information
#    000-016: 17 * 1 = 17 : patient pesonal info (AGE, GENDER, RACE, ETHNICITY, <UNUSDED7-19>)
#    017-036: 20 * 1 = 20 : immunizations (CODE)
#    037-056: 20 * 1 = 20 : allergies (CODE)
#    057-076: 50 * 1 = 50 : conditions (CODE)
#    077-136: 20 * 1 = 20 : imaging_studies (BODYSITE)
#    137-156: 50 * 1 = 50:  procedures (CODE)
#    157-196: 20 * 1 = 20 : careplans (CODE)


	// Locals
	uint patient_vid;
	uint FIELD_LIMIT;
	int temp;
	uint size;
	double norm;
	int defaultValue;

	// Global accumulators
	ListAccum<int> @@patientVector;
	ListAccum<uint> @@tempVec;

	// Initialize
	patientList = {targetPatient};
	temp = 0;
	defaultValue = 1;


	// Field 0-3: age, gender, race
	temp = patient_age(targetPatient);
	@@patientVector += temp;
	temp = patient_gender(targetPatient);
	@@patientVector += temp;
	temp = patient_race(targetPatient);
	@@patientVector += temp;
	temp = patient_ethnicity(targetPatient);
	@@patientVector += temp;

	// Field 4-16: Empty for now, add additional fields in future
	foreach i in RANGE[7,19] do
		temp = defaultValue;
	@@patientVector += temp;
	end;

# Immunization
	@@tempVec.clear();
	property_list (ANY) = select a FROM patientList-(patient_HAD_immunization:e)-immunizations:a 
		ACCUM @@tempVec += a.CODE ;
#  foreach i in RANGE[0, @@tempVec.size()-1] do
#	@@patientVector += @@tempVec.get(i);
#  end;
#  foreach i in RANGE[@@tempVec.size(), 19] do
#	@@patientVector += 0;
#  end;
	@@patientVector += udf_get_similarity_vec(0, 20, @@tempVec);

# allergies
	@@tempVec.clear();
	property_list = select a FROM patientList-(patient_HAD_allergy:e)-allergies:a 
		ACCUM @@tempVec += a.CODE ;
#  foreach i in RANGE[0, @@tempVec.size()-1] do
#	@@patientVector += @@tempVec.get(i);
#  end;
#  foreach i in RANGE[@@tempVec.size(), 19] do
#	@@patientVector += 0;
#  end;
	@@patientVector += udf_get_similarity_vec(1, 20, @@tempVec);

# conditions
	@@tempVec.clear();
	property_list = select a FROM patientList-(patient_HAD_condition:e)-conditions:a 
		ACCUM @@tempVec += a.CODE ;
#  foreach i in RANGE[0, @@tempVec.size()-1] do
#	@@patientVector += @@tempVec.get(i);
#  end;
#  foreach i in RANGE[@@tempVec.size(), 50] do
#	@@patientVector += 0;
#  end;
	@@patientVector += udf_get_similarity_vec(2, 50, @@tempVec);

# imaging_studies
	@@tempVec.clear();
	property_list = select a FROM patientList-(patient_HAD_imaging_study:e)-imaging_studies:a 
		ACCUM @@tempVec += a.BODYSITE_CODE;
	@@patientVector += udf_get_similarity_vec(3, 20, @@tempVec);

# pocedures
	@@tempVec.clear();
	property_list = select a FROM patientList-(patient_HAD_procedure:e)-procedures:a 
		ACCUM @@tempVec += a.CODE;
	@@patientVector += udf_get_similarity_vec(4, 50, @@tempVec);

# careplans
	@@tempVec.clear();
	property_list = select a FROM patientList-(patient_HAD_careplan:e)-careplans:a 
		ACCUM @@tempVec += a.CODE;
	@@patientVector += udf_get_similarity_vec(5, 20, @@tempVec);

	return @@patientVector;
}


CREATE DISTRIBUTED QUERY cosinesim_clear_embeddings() FOR GRAPH @graph {
    ListAccum<INT> @@emptyVec;

    population = {patients.*};
    UPDATE p FROM population:p
        SET p.COSINE_SIM_VECTOR = @@emptyVec;
    UPDATE p FROM population:p
        SET p.COSINE_SIM_NORMAL = 0;
}


CREATE DISTRIBUTED QUERY cosinesim_embed_vectors() FOR GRAPH @graph {
    population = {patients.*};
    UPDATE p FROM population:p
        SET p.COSINE_SIM_VECTOR = patient_vector(p);
}


CREATE DISTRIBUTED QUERY cosinesim_embed_normals() FOR GRAPH @graph {
    # Cache normals, just for software cosine similarity
    population = {patients.*};
    UPDATE p FROM population:p
        SET p.COSINE_SIM_NORMAL = udf_calculate_normal(p.COSINE_SIM_VECTOR);
}


#CREATE QUERY cosinesim_cache_to_vertices() FOR GRAPH @graph {
#    cosinesim_embed_vectors();
#    cosinesim_embed_normals();
#}


CREATE QUERY cosinesim_match_sw(vertex<patients> source, uint topKID) 
FOR GRAPH @graph RETURNS (ListAccum<XilCosinesimMatch>) {

# Heap with max size of topKID sorted decending by score then ascending last name
    HeapAccum<XilCosinesimMatch>(topKID, score DESC, Id ASC) @@topK_Heap;
    ListAccum<XilCosinesimMatch> @@topK;
    ListAccum<vertex<patients>> @@plist;
    ListAccum<INT> @@targetPatientVector;
    DOUBLE targetPatientNormal;

# Patient Population
    population = {patients.*};
    @@targetPatientVector = patient_vector(source);
    targetPatientNormal = udf_calculate_normal(@@targetPatientVector);

    patientList = SELECT p FROM population:p
        ACCUM @@topK_Heap += XilCosinesimMatch(p,
            udf_cos_theta(p.COSINE_SIM_VECTOR, p.COSINE_SIM_NORMAL, @@targetPatientVector, targetPatientNormal));

    FOREACH item IN @@topK_Heap DO
        @@topK += item; 
    END;

    RETURN @@topK;
}

CREATE DISTRIBUTED QUERY cosinesim_set_num_devices(UINT num_devices) FOR GRAPH @graph {
    udf_xilinx_recom_set_num_devices(num_devices);
}

CREATE DISTRIBUTED QUERY cosinesim_get_num_devices() FOR GRAPH @graph RETURNS (UINT) {
    UINT ret;
    ret = udf_xilinx_recom_get_num_devices();
    return ret;
}

CREATE DISTRIBUTED QUERY cosinesim_is_fpga_initialized() FOR GRAPH @graph RETURNS (BOOL) {
    BOOL ret;
    ret = udf_xilinx_recom_is_initialized();
    RETURN ret;
}

create query load_graph_cosinesim_ss_fpga_core() for graph @graph returns (int) {
    ListAccum<ListAccum<int> > @@patientVectors;
    ListAccum<UINT> @@patientIds;
    int ret;

    population = {patients.*};
    patientList = select p from population:p
        ACCUM @@patientVectors += p.COSINE_SIM_VECTOR, @@patientIds += getvid(p);

    ret = udf_xilinx_recom_load_population_vectors(@@patientVectors, @@patientIds);
    return ret;
}

create query cosinesim_ss_fpga_core (vertex<patients> source, uint topK) for 
    graph @graph returns (ListAccum<XilCosinesimMatch>) 
{
    ListAccum<XilCosinesimMatch> @@results;
    ListAccum<int> @@targetPatientVector;

    population = {patients.*};

    @@targetPatientVector = patient_vector(source);

    @@results = udf_xilinx_recom_match_target_vector(topK, @@targetPatientVector);
    RETURN @@results;
}

install query patient_age, patient_race, patient_gender, patient_ethnicity, 
    patient_vector, cosinesim_clear_embeddings, cosinesim_embed_vectors, cosinesim_embed_normals,
    cosinesim_match_sw, cosinesim_set_num_devices,
    cosinesim_get_num_devices, cosinesim_is_fpga_initialized,
    load_graph_cosinesim_ss_fpga_core, cosinesim_ss_fpga_core
